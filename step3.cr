
# [3] Циклы в языке Crystal

i = 1
while i < 10
	puts "Переменная i = #{i}"
	i += 1
end

# Если условие переменная, то она не будет равна nil (true || false)
# Условие можно задать как var.is_a?(Type), тогда var внутри цикла типа Type
# Условие можно задать как var.responds_to?(:method), тогда var = типу, который отвечает методу
# Тип переменной до цикла == типу переменной после цикла

a = 1
i = 1
while i < 10
	a = "Hello World"
  puts "a = #{a}, size a = #{a.size}, i = #{i}"
	i = i + 1
end
puts "a = #{a}, type a = #{typeof(a)}"

# Если надо выполнить тело цикла хотя бы один раз

a = 1
while true
	puts a
	a = a + 1
	break if a > 0
end
# break == прерывание выполенния цикла
# next == переход к следующей итерации цикла

# Есть оператор until = противоположность while

# Есть оператор && (оценивает левую часть выражения)
# 1) если левая часть истина, то возвращается значение правой части
# 2) если левая часть ложь, то возвращается значение левой части
# && == синтаксический сахар оператора if

puts 1 > 2 && 2 > 3
# показать как происходит оценка

tmp = 1 > 2
if tmp
  puts "сработал первый вариант"
  puts 2 > 3
else
  puts "сработал второй вариант"
  puts tmp
end
# показать что это аналог записи выше

# Есть оператор || (оценивает левую часть выражения)
# 1) если левая часть ложь, то возвращется значение правой
# 2) если левая часть истина, то возвращается значение левой части
# || == синтаксический сахар оператора if

puts 1 > 2 || 2 > 3

tmp = 1 > 2
if tmp
  puts "сработал первый вариант"
  puts tmp
else
  puts "сработал второй вариант"
  puts 2 > 3
end
